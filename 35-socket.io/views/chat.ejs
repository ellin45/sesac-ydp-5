<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>socket.io 채팅</title>
    <script src="/socket.io/socket.io.js"></script>

    <style>
      .notice{
        display: flex;
        justify-content: center;
        
      }
      .d-none{
        
      }
    </style>
  </head>
  <body>
    <h1>My Chat</h1>

    <!-- [실습1] 각 버튼 누를 때마다 서버로 메세지 보내기 -->
    <!-- <button onclick="sayHello()">Hello</button> -->
    <!-- <button onclick="sayStudy()">Study</button>
    <button onclick="sayBye()">Bye</button> -->
    <!-- <p id="form-server"></p> -->

    <!-- [실습3-2] 닉네임 입력 폼 -->
    <div class="entry-box">
      <input
        type="text"
        id="nickname"
        placeholder="닉네임"
        autofocus
        onkeypress="if(window.event.keyCode==13){join()}"
      />
      <button type="button" onclick="join();">입장</button>
    </div>

    <!-- //[실습2]채팅 UI -->
    <main class="chat-box d-none" style="background-color: skyblue;"">
      <div class="chat-list" style=" min-height: 300px">
        <!-- 임시 대화 데이터 -->
        
        <!-- <div class="my-chat" style="display: flex; justify-content: flex-end">
          <p style="background-color: yellow; border-radius: 10px">user1 : msg1</p>
        </div>
        <div
          class="other-chat"
          style="display: flex; justify-content: flex-start; border-radius: 10px"
        >
          <p style="background-color: white; border-radius: 10px">user2: msg2</p>
        </div>
      </div>
      <div class="input-container" style="display: flex">
        <input style="width: 90%" />
        <button>전송</button> -->
        <!-- 메세지 전송 영역 -->
      <select id="nick-list"></select
        >에게
        <input
          type="text"
          id="message"
          onkeypress="if(window.event.keyCode==13){send()}"
        />
        <button type="button" onclick="send();">전송</button>
      </div>
    </main>

    <script>
      let socket = io.connect(); // 소켓 사용을 위한 객체 생성

      socket.on('connect', () => {
        document.getElementsByClassName('chat-enter-message').textContent = `${socket.id}님이 입장하셨습니다.`
        console.log('클라이언트 연결 완료 :: ', socket.id);
      });

      //[실습1]
      // function sayHello() {
      //   socket.emit('hello', { who: 'client', msg: 'hello' });
      // }
      // socket.on('helloKr', (data) => {
      //   document.querySelector('#form-server').textContent = `${data.who} : ${data.msg}`;
      // });

      // function sayStudy() {
      //   socket.emit('study', { who: 'client', msg: 'study' });
      // }
      // socket.on('studyKr', (data) => {
      //   document.querySelector('#form-server').textContent = `${data.who} : ${data.msg}`;
      // });
      // function sayBye() {
      //   socket.emit('Bye', { who: 'client', msg: 'Bye' });
      // }
      // socket.on('ByeKr', (data) => {
      //   console.count(data);
      //   document.querySelector('#form-server').textContent = `${data.who} : ${data.msg}`;
      // });

    //  [실습3] 채팅창 입장 문구
      socket.on('notice', (msg) => {
        document.querySelector('.chat-list').insertAdjacentHTML('beforeend', `<div>${msg}</div>`);
      });

      //[실습3-2] 채팅창 입장 문구 socket.id => nickname
      function join() {
        socket.emit('setNick', document.querySelector('#nickname').value);

      }

     //[실습3-2] 채팅창 입장 문구 socket.id => nickname
    //  닉네임 중복 alert 띄우기
    socket.on('error', (data) => {
      alert(data);
    })

     //[실습3-2] 채팅창 입장 문구 socket.id => nickname
    //입장 성공 : 닉네임 입력창 비활성화
    socket.on('entrySuccess', (nick) => {
      myNick = nick; // 내 닉네임 저장
      document.querySelector('#nickname').disabled = true; // 인풋 비활성화
      document.querySelector('.entry-box > button').disabled = true; // 버튼 비활성화
      document.querySelector('.chat-box').classList.remove('d-none'); //채팅창 보이기
    })

    // [실습 3-2] 채팅창 입장 문구 socket.id -> nickname
    // 유저 목록 업데이트 (select 박스의 option 태그 개수 변경)
    socket.on('updateNicks', (nickObjs)=>{
      // nickObjs: {socket.id: nick1, socket.id: nick2, ...}

      let options = `<option value="all">전체</option>`;

      // TODO: nickObjs 반복 돌아서 option 태그 추가
      // option 태그의 value 속성 값은 socket.id, option 태그의 컨텐츠는 nick값

      for(const key in nickObjs){
        options += `<option value="${key}">${nickObjs[key]}</option>`;
      }
      document.querySelector('#nick-list').innerHTML = options;
    })
    </script>
  </body>
</html>

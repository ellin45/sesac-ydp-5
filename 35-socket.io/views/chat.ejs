<!-- index.html -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>socket.io 채팅</title>
    <!-- cdn -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
      /* [실습2] 채팅창 UI 만들기 */
      .chat-list {
        background-color: skyblue;
        width: 50%;
        height: 500px;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column-reverse;
      }

      .chat-list div {
        margin-top: 3px;
      }

      .chat-list div div {
        display: inline-block;
        padding: 3px;
      }

      .dm-list {
        background-color: lightgreen;
        width: 50%;
        height: 200px;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column-reverse;
        margin-top: 10px;
      }

      .dm-list div {
        margin-top: 3px;
      }

      .dm-list div div {
        display: inline-block;
        padding: 3px;
      }

      .my-chat {
        text-align: right;
      }

      .my-chat div {
        background-color: yellow;
        border-radius: 10px 10px 0px 10px;
      }

      .other-chat div {
        background-color: white;
      }

      .dm-chat div {
        background-color: lightgreen;
      }

      /* [실습3] 채팅창 입장 안내 문구 */
      .notice {
        text-align: center;
        color: #005397;
        font-size: 12px;
      }

      .d-none {
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>My Chat</h1>

    <!-- [실습3-2] 닉네임 입력 폼 -->
    <div class="entry-box">
      <input
        type="text"
        id="nickname"
        placeholder="닉네임"
        autofocus
        onkeypress="if(window.event.keyCode==13){join()}"
      />
      <button type="button" onclick="join();">입장</button>
    </div>

    <!-- [실습2] 채팅 UI -->
    <main class="chat-box d-none">
      <div class="chat-list">
        <div class="dm-list"></div>
      </div>

      <!-- 메세지 전송 영역 -->
      <select id="nick-list"></select>
      <input type="text" id="message" onkeypress="if(window.event.keyCode==13){send();}" />
      <button type="button" onclick="send();">전송</button>
      <!-- DM 전송 영역 -->
      <input type="text" id="dm-message" onkeypress="if(window.event.keyCode==13){sendDM();}" />
      <button type="button" onclick="sendDM();">DM 전송</button>
    </main>

    <script>
      let socket = io.connect(); // 소켓 사용을 위한 객체 생성
      let myNick; // 내 닉네임

      socket.on('connect', () => {
        console.log('클라이언트 연결 완료 :: ', socket.id);
      });

      // [실습3] 채팅창 입장 문구
      socket.on('notice', (msg) => {
        document
          .querySelector('.chat-list')
          .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);
      });

      // [실습3-2] 채팅창 입장 문구 socket.id -> nickname
      function join() {
        socket.emit('setNick', document.querySelector('#nickname').value);
      }

      // [실습3-2] 채팅창 입장 문구 socket.id -> nickname
      socket.on('error', (data) => {
        alert(data);
      });

      // [실습3-2] 채팅창 입장 문구 socket.id -> nickname
      socket.on('entrySuccess', (nick) => {
        myNick = nick;
        document.querySelector('#nickname').disabled = true;
        document.querySelector('.entry-box > button').disabled = true;
        document.querySelector('.chat-box').classList.remove('d-none');
      });

      // [실습3-2] 채팅창 입장 문구 socket.id -> nickname
      socket.on('updateNicks', (nickObjs) => {
        let options = `<option value="all">전체</option>`;

        for (let key in nickObjs) {
          options += `<option value="${key}">${nickObjs[key]}</option>`;
        }

        document.querySelector('#nick-list').innerHTML = options;
      });

      // [실습4] 채팅창 메세지 전송 step1
      function send() {
        socket.emit('send', { nick: myNick, message: document.querySelector('#message').value });
      }

      // [실습4] 채팅창 메세지 전송 Step2
      socket.on('send', (data) => {
        console.log(data);
        if (data.nick === myNick) {
          document
            .querySelector('.chat-list')
            .insertAdjacentHTML(
              'beforeend',
              `<div class="my-chat"><div class="my-chat-msg">${data.nick}: ${data.message}</div></div>`
            );
        } else {
          document
            .querySelector('.chat-list')
            .insertAdjacentHTML(
              'beforeend',
              `<div class="other-chat"><div class="other-chat-msg">${data.nick}: ${data.message}</div></div>`
            );
        }
      });
      // [실습5] DM 전송
      function sendDM() {
        const targetNick = document.querySelector('#nick-list').value;
        const msg = document.querySelector('#message').value;

        socket.emit('sendDM', { nick: targetNick, message: msg });
      }

      // [실습4] DM 수신
      socket.on('receiveDM', (data) => {
        document
          .querySelector('.dm-list')
          .insertAdjacentHTML(
            'beforeend',
            `<div class="dm-chat"><div class="dm-chat-msg">${data.nick} (DM): ${data.message}</div></div>`
          );
      });
    </script>
  </body>
</html>
